/*
 * GccApplication1.c
 *
 * Created: 5/2/2019 9:20:21 AM
 * Author : ucrcse
 */ 

#include <avr/io.h>


/* Partner 1 Name & E-mail: Emanuel Halfon ehalf001@ucr.edu
* Partner 2 Name & E-mail:  Christian Grayson cgray009@ucr.edu
* Lab Section: 024
* Assignment: Lab # 8 Exercise # 4
* Exercise Description: Adding the first bit and the second bit of an input.
*
* I acknowledge all content contained herein, excluding template or example
* code, is my own original work.
*/

#include <avr/io.h>
#include <avr/interrupt.h>
void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
	// ADEN: setting this bit enables analog-to-digital conversion.
	// ADSC: setting this bit starts the first conversion.
	// ADATE: setting this bit enables auto-triggering. Since we are
	//        in Free Running Mode, a new conversion will trigger whenever
	//        the previous conversion completes.
}

int main(void)
{
	DDRB = 0xFF; // Set port B to output
	PORTB = 0x00; // Init port B to 0s
	//DDRD = 0xFF;
	//PORTD = 0x00;
	PORTA = 0xFF;
	DDRA = 0x00;
	ADC_init();
	while(1) {
		unsigned char port_B = 0x00;
		//unsigned char port_D = 0x00;
		unsigned short x = ADC;  // Value of ADC register now stored in variable x.
		unsigned short values = x >> 5;
		if(values >= 8)
		{
			port_B = 0xFF;
		}
		else if( values >= 7)
		{
			port_B = 0x7F;
		}
		else if( values >= 6)
		{
			port_B = 0x3F;
		}
		else if( values >= 5)
		{
			port_B = 0x1F;
		}
		else if( values >= 4)
		{
			port_B = 0x0F;
		}
		else if( values >= 3)
		{
			port_B = 0x07;
		}
		else if( values >= 2)
		{
			port_B = 0x03;
		}
		else if( values >= 1)
		{
			port_B = 0x01;
		}				
		PORTB = port_B;
		//PORTD = port_D;
	}
}

